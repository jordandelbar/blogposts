// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE app.users
SET activated = true
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, activateUser, id)
	return err
}

const checkUserExistsByEmail = `-- name: CheckUserExistsByEmail :one
SELECT EXISTS(
    SELECT 1
    FROM app.users
    WHERE email = $1
)
`

func (q *Queries) CheckUserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO app.users (
    name,
    email,
    password_hash
) VALUES ($1, $2, $3)
RETURNING id
`

type CreateUserParams struct {
	Name         string
	Email        string
	PasswordHash []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.PasswordHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE app.users
SET activated = false
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deactivateUser, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM app.users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, name, email, password_hash, activated
FROM app.users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Activated,
	)
	return i, err
}
