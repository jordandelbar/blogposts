// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: articles_cms.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createArticle = `-- name: CreateArticle :exec
INSERT INTO content.articles (
    title,
    slug,
    content
) VALUES ($1, $2, $3)
`

type CreateArticleParams struct {
	Title   string
	Slug    string
	Content string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) error {
	_, err := q.db.ExecContext(ctx, createArticle, arg.Title, arg.Slug, arg.Content)
	return err
}

const deleteArticle = `-- name: DeleteArticle :execrows
DELETE FROM content.articles
WHERE id = $1
    AND is_deleted = true
    AND deleted_at IS NOT NULL
`

func (q *Queries) DeleteArticle(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteArticle, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllArticlesByID = `-- name: GetAllArticlesByID :one
SELECT
  id,
  title,
  slug,
  content,
  created_at,
  published_at,
  is_published,
  is_deleted,
  deleted_at
FROM content.articles
WHERE id = $1
`

type GetAllArticlesByIDRow struct {
	ID          int32
	Title       string
	Slug        string
	Content     string
	CreatedAt   sql.NullTime
	PublishedAt sql.NullTime
	IsPublished sql.NullBool
	IsDeleted   sql.NullBool
	DeletedAt   sql.NullTime
}

func (q *Queries) GetAllArticlesByID(ctx context.Context, id int32) (GetAllArticlesByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAllArticlesByID, id)
	var i GetAllArticlesByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.IsPublished,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const getArticleById = `-- name: GetArticleById :one
SELECT
  id,
  title,
  slug,
  content,
  created_at,
  published_at,
  is_published
FROM content.articles
WHERE id = $1
    AND (is_deleted = false OR is_deleted IS NULL)
`

type GetArticleByIdRow struct {
	ID          int32
	Title       string
	Slug        string
	Content     string
	CreatedAt   sql.NullTime
	PublishedAt sql.NullTime
	IsPublished sql.NullBool
}

func (q *Queries) GetArticleById(ctx context.Context, id int32) (GetArticleByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getArticleById, id)
	var i GetArticleByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.IsPublished,
	)
	return i, err
}

const listAllArticles = `-- name: ListAllArticles :many
SELECT
  id,
  title,
  slug,
  published_at,
  is_published,
  created_at,
  updated_at
FROM content.articles
WHERE is_deleted = false OR is_deleted IS NULL
ORDER BY created_at DESC
`

type ListAllArticlesRow struct {
	ID          int32
	Title       string
	Slug        string
	PublishedAt sql.NullTime
	IsPublished sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) ListAllArticles(ctx context.Context) ([]ListAllArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllArticlesRow
	for rows.Next() {
		var i ListAllArticlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.PublishedAt,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeletedArticles = `-- name: ListDeletedArticles :many
SELECT
  id,
  title,
  slug,
  published_at,
  is_published,
  created_at,
  updated_at,
  deleted_at
FROM content.articles
WHERE is_deleted = true
ORDER BY deleted_at DESC
`

type ListDeletedArticlesRow struct {
	ID          int32
	Title       string
	Slug        string
	PublishedAt sql.NullTime
	IsPublished sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}

func (q *Queries) ListDeletedArticles(ctx context.Context) ([]ListDeletedArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listDeletedArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDeletedArticlesRow
	for rows.Next() {
		var i ListDeletedArticlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.PublishedAt,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishArticle = `-- name: PublishArticle :exec
UPDATE content.articles
SET
    is_published = true,
    published_at = now(),
    updated_at = now()
WHERE id = $1
`

func (q *Queries) PublishArticle(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, publishArticle, id)
	return err
}

const restoreArticle = `-- name: RestoreArticle :exec
UPDATE content.articles
SET
    is_deleted = false,
    deleted_at = NULL,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) RestoreArticle(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, restoreArticle, id)
	return err
}

const softDeleteArticle = `-- name: SoftDeleteArticle :execrows
UPDATE content.articles
SET
    is_deleted = true,
    is_published = false,
    deleted_at = now(),
    updated_at = now()
WHERE id = $1
`

func (q *Queries) SoftDeleteArticle(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, softDeleteArticle, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const unpublishArticle = `-- name: UnpublishArticle :exec
UPDATE content.articles
SET
    is_published = false,
    published_at = NULL,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) UnpublishArticle(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, unpublishArticle, id)
	return err
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE content.articles
SET
    title = $2,
    slug = $3,
    content = $4,
    updated_at = now()
WHERE id = $1
`

type UpdateArticleParams struct {
	ID      int32
	Title   string
	Slug    string
	Content string
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.ExecContext(ctx, updateArticle,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Content,
	)
	return err
}
