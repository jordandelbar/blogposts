// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions.sql

package sqlc

import (
	"context"
)

const addPermissionForUser = `-- name: AddPermissionForUser :exec
INSERT INTO auth.users_permissions (user_id, permission_id)
SELECT $1, p.id
FROM auth.permissions AS p
WHERE p.code = $2
`

type AddPermissionForUserParams struct {
	UserID int64
	Code   string
}

func (q *Queries) AddPermissionForUser(ctx context.Context, arg AddPermissionForUserParams) error {
	_, err := q.db.ExecContext(ctx, addPermissionForUser, arg.UserID, arg.Code)
	return err
}

const getPermissions = `-- name: GetPermissions :many
SELECT p.code
FROM auth.permissions AS p
INNER JOIN auth.users_permissions AS up ON up.permission_id = p.id
INNER JOIN app.users AS u ON up.user_id = u.id
WHERE u.id = $1
`

func (q *Queries) GetPermissions(ctx context.Context, id int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
