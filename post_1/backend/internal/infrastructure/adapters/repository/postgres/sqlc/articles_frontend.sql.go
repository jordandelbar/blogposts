// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: articles_frontend.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getArticleBySlug = `-- name: GetArticleBySlug :one
SELECT
  id,
  title,
  slug,
  content,
  created_at,
  published_at,
  is_published
FROM content.articles
WHERE slug = $1
    AND is_published = true
    AND is_deleted = false
`

type GetArticleBySlugRow struct {
	ID          int32
	Title       string
	Slug        string
	Content     string
	CreatedAt   sql.NullTime
	PublishedAt sql.NullTime
	IsPublished sql.NullBool
}

func (q *Queries) GetArticleBySlug(ctx context.Context, slug string) (GetArticleBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getArticleBySlug, slug)
	var i GetArticleBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.IsPublished,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT
  id,
  title,
  slug,
  published_at
FROM content.articles
WHERE is_published = true
    AND is_deleted = false
ORDER BY published_at DESC
`

type ListArticlesRow struct {
	ID          int32
	Title       string
	Slug        string
	PublishedAt sql.NullTime
}

func (q *Queries) ListArticles(ctx context.Context) ([]ListArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArticlesRow
	for rows.Next() {
		var i ListArticlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
